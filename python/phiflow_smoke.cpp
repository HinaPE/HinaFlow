#include "phiflow_smoke.h"

/******************************************************************************
 *
 * HinaFlow fluid solver framework
 * Copyright 2024 Xayah Hina
 *
 * This program is free software, distributed under the terms of the
 * Mozilla Public License, Version 2.0
 * https://www.mozilla.org/en-US/MPL/2.0/
 *
 ******************************************************************************/


#include "common.h"

#include <filesystem>
#include <fstream>

static bool DEBUG_MODE = false;
static const std::string DEBUG_PY_FILENAME = "debug_phiflow.py";

#define RECORD_EXPRESSION(expr) \
    if (DEBUG_MODE) \
    { \
        std::ofstream file(DEBUG_PY_FILENAME, std::ios::app); \
        file << expr << std::endl; \
        file.close(); \
    }

void HinaFlow::Python::PhiFlowSmoke::DebugMode(const bool enable)
{
    DEBUG_MODE = enable;
    if (enable)
    {
        std::ofstream file(DEBUG_PY_FILENAME, std::ios::trunc); // create & clear file
        file << "\n# >>> This file is auto generated by HinaFlow <<<\n" << std::endl;
        printf("Debug file created at: %ls\n", std::filesystem::absolute(DEBUG_PY_FILENAME).c_str());
    }
}

void HinaFlow::Python::PhiFlowSmoke::ImportPhiFlow(const Backend& backend)
{
    UT_WorkBuffer expr;
    switch (backend)
    {
    case Backend::CPU:
        expr.sprintf(R"(
from phi.flow import *
)");
        break;
    case Backend::Torch:
        expr.sprintf(R"(
from phi.torch.flow import *
)");
        break;
    case Backend::JAX:
        expr.sprintf(R"(
from phi.jax.flow import *
)");
        break;
    case Backend::TensorFlow:
        expr.sprintf(R"(
from phi.tf.flow import *
)");
        break;
    default:
        throw std::runtime_error("Invalid backend");
    }
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    RECORD_EXPRESSION(expr);
}

void HinaFlow::Python::PhiFlowSmoke::CreateScalarField(const std::string& name, const UT_Vector3i& resolution, const UT_Vector3& size, const UT_Vector3& center, const Extrapolation& extrapolation, const float init_value)
{
    std::string extrapolation_str;
    switch (extrapolation)
    {
    case Extrapolation::Dirichlet:
        extrapolation_str = "extrapolation.ZERO";
        break;
    case Extrapolation::Neumann:
        extrapolation_str = "extrapolation.ZERO_GRADIENT";
        break;
    default:
        throw std::runtime_error("Invalid extrapolation");
    }
    UT_WorkBuffer expr;
    expr.sprintf(R"(
center = (%f, %f, %f)
size = (%f, %f, %f)
res = (%d, %d, %d)
%s = CenteredGrid(values=0, boundary=%s, bounds=Box(x=(-size[0]/2.0 + center[0], size[0]/2.0 + center[0]), y=(-size[1]/2.0 + center[1], size[1]/2.0 + center[1]), z=(-size[2]/2.0 + center[2], size[2]/2.0 + center[2])), resolution=spatial(x=res[0], y=res[1], z=res[2]))
)", center[0], center[1], center[2], size[0], size[1], size[2], resolution[0], resolution[1], resolution[2], name.c_str(), extrapolation_str.c_str());
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    RECORD_EXPRESSION(expr)
}

void HinaFlow::Python::PhiFlowSmoke::CreateVectorField(const std::string& name, const UT_Vector3i& resolution, const UT_Vector3& size, const UT_Vector3& center, const Extrapolation& extrapolation, const float init_value)
{
    std::string extrapolation_str;
    switch (extrapolation)
    {
    case Extrapolation::Dirichlet:
        extrapolation_str = "extrapolation.ZERO";
        break;
    case Extrapolation::Neumann:
        extrapolation_str = "extrapolation.ZERO_GRADIENT";
        break;
    default:
        throw std::runtime_error("Invalid extrapolation");
    }
    UT_WorkBuffer expr;
    expr.sprintf(R"(
center = (%f, %f, %f)
size = (%f, %f, %f)
res = (%d, %d, %d)
%s = StaggeredGrid(values=0, boundary=%s, bounds=Box(x=(-size[0]/2.0 + center[0], size[0]/2.0 + center[0]), y=(-size[1]/2.0 + center[1], size[1]/2.0 + center[1]), z=(-size[2]/2.0 + center[2], size[2]/2.0 + center[2])), resolution=spatial(x=res[0], y=res[1], z=res[2]))
)", center[0], center[1], center[2], size[0], size[1], size[2], resolution[0], resolution[1], resolution[2], name.c_str(), extrapolation_str.c_str());
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    RECORD_EXPRESSION(expr)
}

void HinaFlow::Python::PhiFlowSmoke::CreateSphereInflow(const std::string& name, const std::string& match_field, const UT_Vector3& center, const float radius)
{
    UT_WorkBuffer expr;
    expr.sprintf(R"(
%s = resample(Sphere(x=%f, y=%f, z=%f, radius=%f), to=%s, soft=True)
)", name.c_str(), center[0], center[1], center[2], radius, match_field.c_str());
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    RECORD_EXPRESSION(expr)
}

void HinaFlow::Python::PhiFlowSmoke::CompileFunction(const UT_WorkBuffer& expr)
{
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());
    RECORD_EXPRESSION(expr)
}

void HinaFlow::Python::PhiFlowSmoke::RunFunction(const std::string& func, const std::string& args, const std::string& res)
{
    UT_WorkBuffer expr;
    expr.sprintf(R"(
%s = %s(%s)
)", res.c_str(), func.c_str(), args.c_str());
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    RECORD_EXPRESSION(expr)
}

namespace HinaFlow::Internal::Python::PhiFlowSmoke
{
    void WriteFieldPartial(SIM_RawField* TARGET, const std::vector<double>& SOURCE, const UT_JobInfo& info)
    {
        UT_VoxelArrayIteratorF vit;
        vit.setArray(TARGET->fieldNC());
        vit.setCompressOnExit(true);
        vit.setPartialRange(info.job(), info.numJobs());

        for (vit.rewind(); !vit.atEnd(); vit.advance())
        {
            UT_Vector3I cell(vit.x(), vit.y(), vit.z());
            int idx = HinaFlow::TO_1D_IDX(cell, TARGET->getVoxelRes());
            vit.setValue(static_cast<float>(SOURCE[idx]));
        }
    }

    THREADED_METHOD2(, true, WriteField, SIM_RawField *, TARGET, const std::vector<double>&, SOURCE);

    void WriteHoudiniField(SIM_RawField* TARGET, const std::vector<double>& SOURCE)
    {
        const auto f = TARGET->field();
        auto voxels = f->getXRes() * f->getYRes() * f->getZRes();
        if (voxels != SOURCE.size())
        {
            printf("Error: Field size mismatch\n");
            printf("voxels: %d, size: %lld\n", voxels, SOURCE.size());
            return;
        }
        WriteField(TARGET, SOURCE);
    }
}

void HinaFlow::Python::PhiFlowSmoke::FetchScalarField(const std::string& name, SIM_ScalarField* FIELD)
{
    UT_WorkBuffer expr;
    PY_Result result;
    expr.sprintf(R"(
%s.data.native('x,y,z').cpu().numpy().flatten().tolist()
)", name.c_str());
    result = PYrunPythonExpressionAndExpectNoErrors(expr.buffer(), PY_Result::DOUBLE_ARRAY);
    if (result.myResultType != PY_Result::DOUBLE_ARRAY)
    {
        printf("Error: %s\n", result.myErrValue.buffer());
        return;
    }
    Internal::Python::PhiFlowSmoke::WriteHoudiniField(FIELD->getField(), result.myDoubleArray);
}

void HinaFlow::Python::PhiFlowSmoke::FetchVectorField(const std::string& name, SIM_VectorField* FIELD)
{
    UT_WorkBuffer expr;
    PY_Result result;

    expr.sprintf(R"(
_vc = %s.at_centers()
)", name.c_str());
    PYrunPythonStatementsAndExpectNoErrors(expr.buffer());

    expr.sprintf(R"(
_vc.vector['x'].data.native('x,y,z').cpu().numpy().flatten().tolist()
)");
    result = PYrunPythonExpressionAndExpectNoErrors(expr.buffer(), PY_Result::DOUBLE_ARRAY);
    if (result.myResultType != PY_Result::DOUBLE_ARRAY)
    {
        printf("Error: %s\n", result.myErrValue.buffer());
        return;
    }
    Internal::Python::PhiFlowSmoke::WriteHoudiniField(FIELD->getXField(), result.myDoubleArray);


    expr.sprintf(R"(
_vc.vector['y'].data.native('x,y,z').cpu().numpy().flatten().tolist()
)");
    result = PYrunPythonExpressionAndExpectNoErrors(expr.buffer(), PY_Result::DOUBLE_ARRAY);
    if (result.myResultType != PY_Result::DOUBLE_ARRAY)
    {
        printf("Error: %s\n", result.myErrValue.buffer());
        return;
    }
    Internal::Python::PhiFlowSmoke::WriteHoudiniField(FIELD->getYField(), result.myDoubleArray);


    expr.sprintf(R"(
_vc.vector['z'].data.native('x,y,z').cpu().numpy().flatten().tolist()
)");
    result = PYrunPythonExpressionAndExpectNoErrors(expr.buffer(), PY_Result::DOUBLE_ARRAY);
    if (result.myResultType != PY_Result::DOUBLE_ARRAY)
    {
        printf("Error: %s\n", result.myErrValue.buffer());
        return;
    }
    Internal::Python::PhiFlowSmoke::WriteHoudiniField(FIELD->getZField(), result.myDoubleArray);
}

void HinaFlow::Python::PhiFlowSmoke::CreateScalarField2D(const std::string& name, const UT_Vector2i& resolution, const UT_Vector2& size, const UT_Vector2& center, const Extrapolation& extrapolation, const float init_value)
{
}

void HinaFlow::Python::PhiFlowSmoke::CreateVectorField2D(const std::string& name, const UT_Vector2i& resolution, const UT_Vector2& size, const UT_Vector2& center, const Extrapolation& extrapolation, const float init_value)
{
}
